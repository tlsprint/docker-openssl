---
kind: pipeline
name: 0.9.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7
        --file dockerfiles/0.9.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7a
        --file dockerfiles/0.9.7a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7b
        --file dockerfiles/0.9.7b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7c
        --file dockerfiles/0.9.7c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7d
        --file dockerfiles/0.9.7d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7e
        --file dockerfiles/0.9.7e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7f
        --file dockerfiles/0.9.7f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7g
        --file dockerfiles/0.9.7g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7h
        --file dockerfiles/0.9.7h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7i
        --file dockerfiles/0.9.7i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7j
        --file dockerfiles/0.9.7j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7k
        --file dockerfiles/0.9.7k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7l
        --file dockerfiles/0.9.7l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.7m
        --file dockerfiles/0.9.7m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.7m
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8
        --file dockerfiles/0.9.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8a
        --file dockerfiles/0.9.8a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8b
        --file dockerfiles/0.9.8b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8c
        --file dockerfiles/0.9.8c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8d
        --file dockerfiles/0.9.8d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8e
        --file dockerfiles/0.9.8e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8f
        --file dockerfiles/0.9.8f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8g
        --file dockerfiles/0.9.8g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8h
        --file dockerfiles/0.9.8h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8i
        --file dockerfiles/0.9.8i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8j
        --file dockerfiles/0.9.8j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8k
        --file dockerfiles/0.9.8k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8l
        --file dockerfiles/0.9.8l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8m
        --file dockerfiles/0.9.8m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8m
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8n
        --file dockerfiles/0.9.8n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8n
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8o
        --file dockerfiles/0.9.8o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8o
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8p
        --file dockerfiles/0.9.8p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8p
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8q
        --file dockerfiles/0.9.8q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8q
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8r
        --file dockerfiles/0.9.8r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8r
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8s
        --file dockerfiles/0.9.8s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8s
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8t
        --file dockerfiles/0.9.8t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8t
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8u

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8u
        --file dockerfiles/0.9.8u/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8u
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8u
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8v

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8v
        --file dockerfiles/0.9.8v/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8v
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8v
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8w

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8w
        --file dockerfiles/0.9.8w/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8w
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8w
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8x

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8x
        --file dockerfiles/0.9.8x/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8x
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8x
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8y

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8y
        --file dockerfiles/0.9.8y/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8y
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8y
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8za

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8za
        --file dockerfiles/0.9.8za/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8za
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8za
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zb

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zb
        --file dockerfiles/0.9.8zb/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zb
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zb
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zc

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zc
        --file dockerfiles/0.9.8zc/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zc
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zc
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zd

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zd
        --file dockerfiles/0.9.8zd/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zd
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zd
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8ze

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8ze
        --file dockerfiles/0.9.8ze/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8ze
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8ze
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zf

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zf
        --file dockerfiles/0.9.8zf/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zf
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zf
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zg

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zg
        --file dockerfiles/0.9.8zg/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zg
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zg
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zh

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:0.9.8zh
        --file dockerfiles/0.9.8zh/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zh
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:0.9.8zh
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0
        --file dockerfiles/1.0.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0a
        --file dockerfiles/1.0.0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0b
        --file dockerfiles/1.0.0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0c
        --file dockerfiles/1.0.0c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0d
        --file dockerfiles/1.0.0d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0e
        --file dockerfiles/1.0.0e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0f
        --file dockerfiles/1.0.0f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0g
        --file dockerfiles/1.0.0g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0h
        --file dockerfiles/1.0.0h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0i
        --file dockerfiles/1.0.0i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0j
        --file dockerfiles/1.0.0j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0k
        --file dockerfiles/1.0.0k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0l
        --file dockerfiles/1.0.0l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0m
        --file dockerfiles/1.0.0m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0m
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0n
        --file dockerfiles/1.0.0n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0n
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0o
        --file dockerfiles/1.0.0o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0o
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0p
        --file dockerfiles/1.0.0p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0p
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0q
        --file dockerfiles/1.0.0q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0q
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0r
        --file dockerfiles/1.0.0r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0r
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0s
        --file dockerfiles/1.0.0s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0s
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.0t
        --file dockerfiles/1.0.0t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.0t
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1
        --file dockerfiles/1.0.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1a
        --file dockerfiles/1.0.1a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1b
        --file dockerfiles/1.0.1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1c
        --file dockerfiles/1.0.1c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1d
        --file dockerfiles/1.0.1d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1e
        --file dockerfiles/1.0.1e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1f
        --file dockerfiles/1.0.1f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1g
        --file dockerfiles/1.0.1g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1h
        --file dockerfiles/1.0.1h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1i
        --file dockerfiles/1.0.1i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1j
        --file dockerfiles/1.0.1j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1k
        --file dockerfiles/1.0.1k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1l
        --file dockerfiles/1.0.1l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1m
        --file dockerfiles/1.0.1m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1m
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1n
        --file dockerfiles/1.0.1n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1n
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1o
        --file dockerfiles/1.0.1o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1o
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1p
        --file dockerfiles/1.0.1p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1p
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1q
        --file dockerfiles/1.0.1q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1q
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1r
        --file dockerfiles/1.0.1r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1r
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1s
        --file dockerfiles/1.0.1s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1s
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1t
        --file dockerfiles/1.0.1t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1t
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1u

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.1u
        --file dockerfiles/1.0.1u/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1u
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.1u
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2
        --file dockerfiles/1.0.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2a
        --file dockerfiles/1.0.2a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2b
        --file dockerfiles/1.0.2b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2c
        --file dockerfiles/1.0.2c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2d
        --file dockerfiles/1.0.2d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2e
        --file dockerfiles/1.0.2e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2f
        --file dockerfiles/1.0.2f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2g
        --file dockerfiles/1.0.2g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2h
        --file dockerfiles/1.0.2h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2i
        --file dockerfiles/1.0.2i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2j
        --file dockerfiles/1.0.2j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2k
        --file dockerfiles/1.0.2k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2l
        --file dockerfiles/1.0.2l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2m
        --file dockerfiles/1.0.2m/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2m
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2n
        --file dockerfiles/1.0.2n/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2n
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2o
        --file dockerfiles/1.0.2o/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2o
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2p
        --file dockerfiles/1.0.2p/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2p
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2q
        --file dockerfiles/1.0.2q/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2q
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2r
        --file dockerfiles/1.0.2r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2r
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2s
        --file dockerfiles/1.0.2s/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2s
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.0.2t
        --file dockerfiles/1.0.2t/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.0.2t
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0
        --file dockerfiles/1.1.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0a
        --file dockerfiles/1.1.0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0b
        --file dockerfiles/1.1.0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0c
        --file dockerfiles/1.1.0c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0d
        --file dockerfiles/1.1.0d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0e
        --file dockerfiles/1.1.0e/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0e
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0f
        --file dockerfiles/1.1.0f/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0f
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0g
        --file dockerfiles/1.1.0g/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0g
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0h
        --file dockerfiles/1.1.0h/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0h
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0i
        --file dockerfiles/1.1.0i/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0i
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0j
        --file dockerfiles/1.1.0j/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0j
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0k
        --file dockerfiles/1.1.0k/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0k
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.0l
        --file dockerfiles/1.1.0l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.0l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.1
        --file dockerfiles/1.1.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.1a
        --file dockerfiles/1.1.1a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.1a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.1b
        --file dockerfiles/1.1.1b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.1b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.1c
        --file dockerfiles/1.1.1c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.1c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag tlsprint/openssl:1.1.1d
        --file dockerfiles/1.1.1d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push tlsprint/openssl:1.1.1d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

