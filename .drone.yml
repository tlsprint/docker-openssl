---
kind: pipeline
name: 0.9.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7
      dockerfile: dockerfiles/0.9.7/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7
      dockerfile: dockerfiles/0.9.7/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7a
      dockerfile: dockerfiles/0.9.7a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7a
      dockerfile: dockerfiles/0.9.7a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7b
      dockerfile: dockerfiles/0.9.7b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7b
      dockerfile: dockerfiles/0.9.7b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7c
      dockerfile: dockerfiles/0.9.7c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7c
      dockerfile: dockerfiles/0.9.7c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7d
      dockerfile: dockerfiles/0.9.7d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7d
      dockerfile: dockerfiles/0.9.7d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7e
      dockerfile: dockerfiles/0.9.7e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7e
      dockerfile: dockerfiles/0.9.7e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7f
      dockerfile: dockerfiles/0.9.7f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7f
      dockerfile: dockerfiles/0.9.7f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7g
      dockerfile: dockerfiles/0.9.7g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7g
      dockerfile: dockerfiles/0.9.7g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7h
      dockerfile: dockerfiles/0.9.7h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7h
      dockerfile: dockerfiles/0.9.7h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7i
      dockerfile: dockerfiles/0.9.7i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7i
      dockerfile: dockerfiles/0.9.7i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7j
      dockerfile: dockerfiles/0.9.7j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7j
      dockerfile: dockerfiles/0.9.7j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7k
      dockerfile: dockerfiles/0.9.7k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7k
      dockerfile: dockerfiles/0.9.7k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7l
      dockerfile: dockerfiles/0.9.7l/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7l
      dockerfile: dockerfiles/0.9.7l/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.7m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7m
      dockerfile: dockerfiles/0.9.7m/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.7m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.7m
      dockerfile: dockerfiles/0.9.7m/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8
      dockerfile: dockerfiles/0.9.8/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8
      dockerfile: dockerfiles/0.9.8/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8a
      dockerfile: dockerfiles/0.9.8a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8a
      dockerfile: dockerfiles/0.9.8a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8b
      dockerfile: dockerfiles/0.9.8b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8b
      dockerfile: dockerfiles/0.9.8b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8c
      dockerfile: dockerfiles/0.9.8c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8c
      dockerfile: dockerfiles/0.9.8c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8d
      dockerfile: dockerfiles/0.9.8d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8d
      dockerfile: dockerfiles/0.9.8d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8e
      dockerfile: dockerfiles/0.9.8e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8e
      dockerfile: dockerfiles/0.9.8e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8f
      dockerfile: dockerfiles/0.9.8f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8f
      dockerfile: dockerfiles/0.9.8f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8g
      dockerfile: dockerfiles/0.9.8g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8g
      dockerfile: dockerfiles/0.9.8g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8h
      dockerfile: dockerfiles/0.9.8h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8h
      dockerfile: dockerfiles/0.9.8h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8i
      dockerfile: dockerfiles/0.9.8i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8i
      dockerfile: dockerfiles/0.9.8i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8j
      dockerfile: dockerfiles/0.9.8j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8j
      dockerfile: dockerfiles/0.9.8j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8k
      dockerfile: dockerfiles/0.9.8k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8k
      dockerfile: dockerfiles/0.9.8k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8l
      dockerfile: dockerfiles/0.9.8l/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8l
      dockerfile: dockerfiles/0.9.8l/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8m
      dockerfile: dockerfiles/0.9.8m/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8m
      dockerfile: dockerfiles/0.9.8m/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8n
      dockerfile: dockerfiles/0.9.8n/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8n
      dockerfile: dockerfiles/0.9.8n/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8o
      dockerfile: dockerfiles/0.9.8o/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8o
      dockerfile: dockerfiles/0.9.8o/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8p
      dockerfile: dockerfiles/0.9.8p/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8p
      dockerfile: dockerfiles/0.9.8p/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8q
      dockerfile: dockerfiles/0.9.8q/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8q
      dockerfile: dockerfiles/0.9.8q/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8r
      dockerfile: dockerfiles/0.9.8r/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8r
      dockerfile: dockerfiles/0.9.8r/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8s
      dockerfile: dockerfiles/0.9.8s/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8s
      dockerfile: dockerfiles/0.9.8s/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8t
      dockerfile: dockerfiles/0.9.8t/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8t
      dockerfile: dockerfiles/0.9.8t/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8u

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8u
      dockerfile: dockerfiles/0.9.8u/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8u
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8u
      dockerfile: dockerfiles/0.9.8u/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8v

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8v
      dockerfile: dockerfiles/0.9.8v/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8v
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8v
      dockerfile: dockerfiles/0.9.8v/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8w

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8w
      dockerfile: dockerfiles/0.9.8w/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8w
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8w
      dockerfile: dockerfiles/0.9.8w/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8x

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8x
      dockerfile: dockerfiles/0.9.8x/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8x
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8x
      dockerfile: dockerfiles/0.9.8x/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8y

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8y
      dockerfile: dockerfiles/0.9.8y/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8y
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8y
      dockerfile: dockerfiles/0.9.8y/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8za

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8za
      dockerfile: dockerfiles/0.9.8za/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8za
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8za
      dockerfile: dockerfiles/0.9.8za/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zb

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zb
      dockerfile: dockerfiles/0.9.8zb/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zb
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zb
      dockerfile: dockerfiles/0.9.8zb/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zc

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zc
      dockerfile: dockerfiles/0.9.8zc/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zc
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zc
      dockerfile: dockerfiles/0.9.8zc/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zd

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zd
      dockerfile: dockerfiles/0.9.8zd/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zd
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zd
      dockerfile: dockerfiles/0.9.8zd/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8ze

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8ze
      dockerfile: dockerfiles/0.9.8ze/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8ze
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8ze
      dockerfile: dockerfiles/0.9.8ze/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zf

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zf
      dockerfile: dockerfiles/0.9.8zf/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zf
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zf
      dockerfile: dockerfiles/0.9.8zf/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zg

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zg
      dockerfile: dockerfiles/0.9.8zg/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zg
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zg
      dockerfile: dockerfiles/0.9.8zg/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 0.9.8zh

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zh
      dockerfile: dockerfiles/0.9.8zh/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:0.9.8zh
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 0.9.8zh
      dockerfile: dockerfiles/0.9.8zh/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0
      dockerfile: dockerfiles/1.0.0/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0
      dockerfile: dockerfiles/1.0.0/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0a
      dockerfile: dockerfiles/1.0.0a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0a
      dockerfile: dockerfiles/1.0.0a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0b
      dockerfile: dockerfiles/1.0.0b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0b
      dockerfile: dockerfiles/1.0.0b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0c
      dockerfile: dockerfiles/1.0.0c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0c
      dockerfile: dockerfiles/1.0.0c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0d
      dockerfile: dockerfiles/1.0.0d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0d
      dockerfile: dockerfiles/1.0.0d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0e
      dockerfile: dockerfiles/1.0.0e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0e
      dockerfile: dockerfiles/1.0.0e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0f
      dockerfile: dockerfiles/1.0.0f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0f
      dockerfile: dockerfiles/1.0.0f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0g
      dockerfile: dockerfiles/1.0.0g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0g
      dockerfile: dockerfiles/1.0.0g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0h
      dockerfile: dockerfiles/1.0.0h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0h
      dockerfile: dockerfiles/1.0.0h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0i
      dockerfile: dockerfiles/1.0.0i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0i
      dockerfile: dockerfiles/1.0.0i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0j
      dockerfile: dockerfiles/1.0.0j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0j
      dockerfile: dockerfiles/1.0.0j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0k
      dockerfile: dockerfiles/1.0.0k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0k
      dockerfile: dockerfiles/1.0.0k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0l
      dockerfile: dockerfiles/1.0.0l/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0l
      dockerfile: dockerfiles/1.0.0l/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0m
      dockerfile: dockerfiles/1.0.0m/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0m
      dockerfile: dockerfiles/1.0.0m/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0n
      dockerfile: dockerfiles/1.0.0n/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0n
      dockerfile: dockerfiles/1.0.0n/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0o
      dockerfile: dockerfiles/1.0.0o/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0o
      dockerfile: dockerfiles/1.0.0o/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0p
      dockerfile: dockerfiles/1.0.0p/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0p
      dockerfile: dockerfiles/1.0.0p/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0q
      dockerfile: dockerfiles/1.0.0q/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0q
      dockerfile: dockerfiles/1.0.0q/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0r
      dockerfile: dockerfiles/1.0.0r/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0r
      dockerfile: dockerfiles/1.0.0r/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0s
      dockerfile: dockerfiles/1.0.0s/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0s
      dockerfile: dockerfiles/1.0.0s/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.0t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0t
      dockerfile: dockerfiles/1.0.0t/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.0t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.0t
      dockerfile: dockerfiles/1.0.0t/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1
      dockerfile: dockerfiles/1.0.1/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1
      dockerfile: dockerfiles/1.0.1/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1a
      dockerfile: dockerfiles/1.0.1a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1a
      dockerfile: dockerfiles/1.0.1a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1b
      dockerfile: dockerfiles/1.0.1b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1b
      dockerfile: dockerfiles/1.0.1b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1c
      dockerfile: dockerfiles/1.0.1c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1c
      dockerfile: dockerfiles/1.0.1c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1d
      dockerfile: dockerfiles/1.0.1d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1d
      dockerfile: dockerfiles/1.0.1d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1e
      dockerfile: dockerfiles/1.0.1e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1e
      dockerfile: dockerfiles/1.0.1e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1f
      dockerfile: dockerfiles/1.0.1f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1f
      dockerfile: dockerfiles/1.0.1f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1g
      dockerfile: dockerfiles/1.0.1g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1g
      dockerfile: dockerfiles/1.0.1g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1h
      dockerfile: dockerfiles/1.0.1h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1h
      dockerfile: dockerfiles/1.0.1h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1i
      dockerfile: dockerfiles/1.0.1i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1i
      dockerfile: dockerfiles/1.0.1i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1j
      dockerfile: dockerfiles/1.0.1j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1j
      dockerfile: dockerfiles/1.0.1j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1k
      dockerfile: dockerfiles/1.0.1k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1k
      dockerfile: dockerfiles/1.0.1k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1l
      dockerfile: dockerfiles/1.0.1l/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1l
      dockerfile: dockerfiles/1.0.1l/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1m
      dockerfile: dockerfiles/1.0.1m/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1m
      dockerfile: dockerfiles/1.0.1m/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1n
      dockerfile: dockerfiles/1.0.1n/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1n
      dockerfile: dockerfiles/1.0.1n/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1o
      dockerfile: dockerfiles/1.0.1o/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1o
      dockerfile: dockerfiles/1.0.1o/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1p
      dockerfile: dockerfiles/1.0.1p/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1p
      dockerfile: dockerfiles/1.0.1p/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1q
      dockerfile: dockerfiles/1.0.1q/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1q
      dockerfile: dockerfiles/1.0.1q/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1r
      dockerfile: dockerfiles/1.0.1r/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1r
      dockerfile: dockerfiles/1.0.1r/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1s
      dockerfile: dockerfiles/1.0.1s/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1s
      dockerfile: dockerfiles/1.0.1s/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1t

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1t
      dockerfile: dockerfiles/1.0.1t/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1t
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1t
      dockerfile: dockerfiles/1.0.1t/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.1u

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1u
      dockerfile: dockerfiles/1.0.1u/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.1u
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.1u
      dockerfile: dockerfiles/1.0.1u/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2
      dockerfile: dockerfiles/1.0.2/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2
      dockerfile: dockerfiles/1.0.2/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2a
      dockerfile: dockerfiles/1.0.2a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2a
      dockerfile: dockerfiles/1.0.2a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2b
      dockerfile: dockerfiles/1.0.2b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2b
      dockerfile: dockerfiles/1.0.2b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2c
      dockerfile: dockerfiles/1.0.2c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2c
      dockerfile: dockerfiles/1.0.2c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2d
      dockerfile: dockerfiles/1.0.2d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2d
      dockerfile: dockerfiles/1.0.2d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2e
      dockerfile: dockerfiles/1.0.2e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2e
      dockerfile: dockerfiles/1.0.2e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2f
      dockerfile: dockerfiles/1.0.2f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2f
      dockerfile: dockerfiles/1.0.2f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2g
      dockerfile: dockerfiles/1.0.2g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2g
      dockerfile: dockerfiles/1.0.2g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2h
      dockerfile: dockerfiles/1.0.2h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2h
      dockerfile: dockerfiles/1.0.2h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2i
      dockerfile: dockerfiles/1.0.2i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2i
      dockerfile: dockerfiles/1.0.2i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2j
      dockerfile: dockerfiles/1.0.2j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2j
      dockerfile: dockerfiles/1.0.2j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2k
      dockerfile: dockerfiles/1.0.2k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2k
      dockerfile: dockerfiles/1.0.2k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2l
      dockerfile: dockerfiles/1.0.2l/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2l
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2l
      dockerfile: dockerfiles/1.0.2l/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2m

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2m
      dockerfile: dockerfiles/1.0.2m/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2m
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2m
      dockerfile: dockerfiles/1.0.2m/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2n

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2n
      dockerfile: dockerfiles/1.0.2n/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2n
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2n
      dockerfile: dockerfiles/1.0.2n/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2o

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2o
      dockerfile: dockerfiles/1.0.2o/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2o
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2o
      dockerfile: dockerfiles/1.0.2o/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2p

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2p
      dockerfile: dockerfiles/1.0.2p/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2p
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2p
      dockerfile: dockerfiles/1.0.2p/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2q

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2q
      dockerfile: dockerfiles/1.0.2q/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2q
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2q
      dockerfile: dockerfiles/1.0.2q/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2r
      dockerfile: dockerfiles/1.0.2r/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2r
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2r
      dockerfile: dockerfiles/1.0.2r/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.0.2s

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2s
      dockerfile: dockerfiles/1.0.2s/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.0.2s
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.0.2s
      dockerfile: dockerfiles/1.0.2s/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0
      dockerfile: dockerfiles/1.1.0/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0
      dockerfile: dockerfiles/1.1.0/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0a
      dockerfile: dockerfiles/1.1.0a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0a
      dockerfile: dockerfiles/1.1.0a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0b
      dockerfile: dockerfiles/1.1.0b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0b
      dockerfile: dockerfiles/1.1.0b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0c
      dockerfile: dockerfiles/1.1.0c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0c
      dockerfile: dockerfiles/1.1.0c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0d
      dockerfile: dockerfiles/1.1.0d/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0d
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0d
      dockerfile: dockerfiles/1.1.0d/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0e

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0e
      dockerfile: dockerfiles/1.1.0e/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0e
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0e
      dockerfile: dockerfiles/1.1.0e/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0f

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0f
      dockerfile: dockerfiles/1.1.0f/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0f
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0f
      dockerfile: dockerfiles/1.1.0f/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0g

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0g
      dockerfile: dockerfiles/1.1.0g/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0g
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0g
      dockerfile: dockerfiles/1.1.0g/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0h

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0h
      dockerfile: dockerfiles/1.1.0h/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0h
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0h
      dockerfile: dockerfiles/1.1.0h/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0i

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0i
      dockerfile: dockerfiles/1.1.0i/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0i
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0i
      dockerfile: dockerfiles/1.1.0i/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0j

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0j
      dockerfile: dockerfiles/1.1.0j/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0j
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0j
      dockerfile: dockerfiles/1.1.0j/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.0k

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0k
      dockerfile: dockerfiles/1.1.0k/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.0k
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.0k
      dockerfile: dockerfiles/1.1.0k/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1
      dockerfile: dockerfiles/1.1.1/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1
      dockerfile: dockerfiles/1.1.1/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1a
      dockerfile: dockerfiles/1.1.1a/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1a
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1a
      dockerfile: dockerfiles/1.1.1a/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1b
      dockerfile: dockerfiles/1.1.1b/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1b
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1b
      dockerfile: dockerfiles/1.1.1b/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: 1.1.1c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1c
      dockerfile: dockerfiles/1.1.1c/Dockerfile
      dry_run: true  # Do not push at the end of this step
      purge: false

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: tlsprint/openssl:1.1.1c
    detach: true

  - name: verify TLS10
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: tlsprint/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: plugins/docker
    settings:
      repo: tlsprint/openssl
      tags: 1.1.1c
      dockerfile: dockerfiles/1.1.1c/Dockerfile
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      purge: false

volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

